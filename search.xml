<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android启动过程</title>
    <url>/2017/09/23/Android%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Android从Linux系统启动有4个步骤："><a href="#Android从Linux系统启动有4个步骤：" class="headerlink" title="Android从Linux系统启动有4个步骤："></a>Android从Linux系统启动有4个步骤：</h1><p><em>粗略</em></p>
<h3 id="①-init进程启动"><a href="#①-init进程启动" class="headerlink" title="① init进程启动"></a><em>① init进程启动</em></h3><h3 id="②-Native服务启动"><a href="#②-Native服务启动" class="headerlink" title="② Native服务启动"></a><em>② Native服务启动</em></h3><h3 id="③-System-Server，Android服务启动"><a href="#③-System-Server，Android服务启动" class="headerlink" title="③ System Server，Android服务启动"></a><em>③ System Server，Android服务启动</em></h3><h3 id="④-Home启动"><a href="#④-Home启动" class="headerlink" title="④ Home启动"></a><em>④ Home启动</em></h3><a id="more"></a>
<p>🖼Android框架架构图：<br><img src="http://pic002.cnblogs.com/images/2010/50949/2010123010192073.jpg" alt title="望此图不死"><br>🖼启动框架如图：<br><img src="http://www.linuxidc.com/upload/2011_04/110401062329692.gif" alt title="望此图不死"></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/2020/09/12/Git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="出处：AndyF"><a href="#出处：AndyF" class="headerlink" title="出处：AndyF"></a>出处：AndyF</h1><h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><p><strong>开头的一点点小东西: origin远程库名, master主分支, HEAD当前分支</strong></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section">### 开始</span></span><br><span class="line">git config --global user.email "andyfan98@163.com"</span><br><span class="line">git config --global user.name "AndyF"</span><br><span class="line"></span><br><span class="line"><span class="section">### git基础</span></span><br><span class="line"></span><br><span class="line"><span class="section">#初始化一个git仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="section">#把文件添加到仓库</span></span><br><span class="line">git add readme.txt</span><br><span class="line"></span><br><span class="line"><span class="section">#commit前把add的文件除去</span></span><br><span class="line">git rm --cached xxx</span><br><span class="line"></span><br><span class="line"><span class="section">#提交仓库</span></span><br><span class="line">git commit -m &lt;message&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#工作树状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="section">#查看修改内容</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="section">#显示从最近到最远的提交日志</span></span><br><span class="line">git log --pretty=oneline</span><br><span class="line"></span><br><span class="line"><span class="section">#回退到上一个版本</span></span><br><span class="line"><span class="section">#上一个版本:HEAD^，上上一个版本:HEAD^^, 上一百个版本:HEAD~100, 或者直接输入hash号前位</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="section">#回放操作记录</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="section">#撤销readme.txt在工作区的修改</span></span><br><span class="line">git checkout -- readme.txt</span><br><span class="line"></span><br><span class="line"><span class="section">#把暂存区的修改撤销掉</span></span><br><span class="line">git reset HEAD &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#从库里删除文件</span></span><br><span class="line">git rm &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">###远端库</span></span><br><span class="line"><span class="section">#添加远程库</span></span><br><span class="line">git remote add origin git@github.com:HiAndyFan/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="section">#从远端pull master</span></span><br><span class="line">git pull git@github.com:HiAndyFan/xxx.git</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"><span class="section">#第一次push master分支</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="section">#以后push</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="section">#克隆远程库</span></span><br><span class="line">git clone git@github.com:HiAndyFan/gitskills.git</span><br><span class="line"></span><br><span class="line"><span class="section">#查看远程库信息</span></span><br><span class="line">git remote -v</span><br><span class="line">git branch -a</span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="section">###分支管理</span></span><br><span class="line"><span class="section">#创建新分支dev</span></span><br><span class="line">git branch dev</span><br><span class="line"></span><br><span class="line"><span class="section">#创建并切换到新dev分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line"><span class="section">#查看当前分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="section">#切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="section">#合并dev到当前分支(master)</span></span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line"><span class="section">#删除dev分支</span></span><br><span class="line">git branch -d dev</span><br><span class="line"></span><br><span class="line"><span class="section">#查看分支合并图</span></span><br><span class="line">git log --graph</span><br><span class="line"></span><br><span class="line"><span class="section">##解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</span></span><br><span class="line"><span class="section">#禁用Fast forward, 合并后仍保留分支</span></span><br><span class="line">git merge --no-ff -m "merge with no-ff" dev</span><br><span class="line"></span><br><span class="line"><span class="section">#临时储藏工作区(并不commits)</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="section">#查看储藏的工作区</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="section">#恢复工作区</span></span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"><span class="section">#删除储藏的工作区</span></span><br><span class="line">git stash drop</span><br><span class="line"></span><br><span class="line"><span class="section">#弹出储藏的工作区</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="section">#丢弃一个未合并的分支</span></span><br><span class="line">git branch -D &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#变基</span></span><br><span class="line">git rebase</span><br><span class="line"></span><br><span class="line"><span class="section">###分支标签</span></span><br><span class="line"><span class="section">#在当前分支打上标签</span></span><br><span class="line">git tag &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#查看所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="section">#为历史commit打上标签</span></span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line"></span><br><span class="line"><span class="section">#删除标签</span></span><br><span class="line">git tag -d v0.1</span><br><span class="line"></span><br><span class="line"><span class="section">#推送标签到远程</span></span><br><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#一次性推送所有标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="section">#删除远端的标签(必须先删除本地对应标签)</span></span><br><span class="line">git push origin :refs/tags/v0.9</span><br><span class="line"></span><br><span class="line"><span class="section">###自定义git</span></span><br><span class="line">.gitignore 忽略的文件</span><br><span class="line">[<span class="string">在线配置文件</span>](<span class="link">https://github.com/github/gitignore</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">#强制添加被忽略的文件</span></span><br><span class="line">git add -f &lt;File&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">#检查哪一行配置了问题文件</span></span><br><span class="line">git check-ignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Markdown语法手册</title>
    <url>/2017/09/04/Markdown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><em>学习 <strong>Md</strong> ing 持续更新</em></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><blockquote>
<p><strong><em>Markdown 的目标是实现「易读易写」。</em></strong></p>
</blockquote>
<blockquote>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>
</blockquote>
<blockquote>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<code>*强调*</code>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
</blockquote>
<h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><blockquote>
<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>
</blockquote>
<blockquote>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。<strong><em>HTML 是一种发布的格式，Markdown 是一种书写的格式。</em></strong>就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
</blockquote>
<blockquote>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
</blockquote>
<blockquote>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;</code>等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的<code>&lt;p&gt;</code> 标签</p>
</blockquote>
<blockquote>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p>
</blockquote>
<blockquote>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code>可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt; 或 &lt;img&gt;</code>标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
</blockquote>
<blockquote>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
</blockquote>
<h2 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h2><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt; 和 &amp;</code>。 <code>&lt;</code>符号用于起始标签，<code>&amp;</code>符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt; 和 &amp;amp;</code>。</p>
<blockquote>
<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打<code>「AT&amp;T」</code> ，你必须要写成<code>「AT&amp;amp;T」</code>。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：<br><code>http://images.google.com/images?num=30&amp;q=larry+bird</code><br>你必须要把网址转换写为：<br><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code><br>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
</blockquote>
<blockquote>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code>字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成<code>&amp;amp;</code>。</p>
</blockquote>
<blockquote>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：<br><code>&amp;copy;</code><br>Markdown 会保留它不动。而若你写：<br><code>AT&amp;T</code><br>Markdown 就会将它转为：<br><code>AT&amp;amp;T</code><br>类似的状况也会发生在 <code>&lt;</code>符号上，因为 Markdown 允许 兼容 HTML ，如果你是把<code>&lt;</code>符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：<br><code>4 &lt; 5</code><br>Markdown 将会把它转换为：<br><code>4 &amp;lt; 5</code><br>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code>和 <code>&amp;</code>两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code(和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和<code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。)</p>
</blockquote>
<p><strong>附：</strong><a href="http://www.appinn.com/markdown/#p" title="markdown" target="_blank" rel="noopener">markdown语法说明</a> ，上概述引用于此</p>
<hr>
<h1 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1.斜体和粗体"></a>1.斜体和粗体</h1><h2 id="ex："><a href="#ex：" class="headerlink" title="ex："></a>ex：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*我是斜体*</span> 或 <span class="emphasis">_我也是斜体_</span></span><br><span class="line"><span class="strong">**我是粗体**</span></span><br><span class="line"><span class="strong">***加粗斜体**</span>*</span><br><span class="line"><span class="strong">**_我也是加粗斜体_*</span>*</span><br><span class="line">~~我是删除线~~</span><br></pre></td></tr></table></figure>
<h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><em>我是斜体</em>  或 <em>我也是斜体</em><br><strong>我是粗体</strong><br><strong><em>加粗斜体</em></strong><br><strong><em>我也是加粗斜体</em></strong><br><del>我是删除线</del></p>
<hr>
<h1 id="2-分级标题（无演示效果）"><a href="#2-分级标题（无演示效果）" class="headerlink" title="2.分级标题（无演示效果）"></a>2.分级标题（无演示效果）</h1><h2 id="ex①："><a href="#ex①：" class="headerlink" title="ex①："></a>ex①：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">我是一个一级标题</span><br><span class="line">============================</span><br><span class="line">我是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>
<h2 id="ex②："><a href="#ex②：" class="headerlink" title="ex②："></a>ex②：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<p>注：#后一定要有空格</p>
<hr>
<h1 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3.超链接"></a>3.超链接</h1><p> 两种形式:行内式（常用）和参考式</p>
<h2 id="👉行内式-ex："><a href="#👉行内式-ex：" class="headerlink" title="👉行内式 ex："></a>👉行内式 ex：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">    [链接文字](链接地址 "链接标题")</span></span><br><span class="line">我是[<span class="string">百度</span>](<span class="link">http://www.baidu.com "百度"</span>)</span><br><span class="line">我是[<span class="string">谷歌</span>](<span class="link">http://www.google.com "谷歌"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h3><p>我是<a href="http://www.baidu.com" title="百度" target="_blank" rel="noopener">百度</a><br>我是<a href="http://www.google.com" title="谷歌" target="_blank" rel="noopener">谷歌</a><br>注：<br>链接地址与链接标题前有一个空格<br>()中的””中可以为链接指定title属性，title属性可加可不加。<br> title属性的效果是鼠标悬停在链接上会出现指定的 title文字。这样的形式。。</p>
<h2 id="👉参考式-ex："><a href="#👉参考式-ex：" class="headerlink" title="👉参考式 ex："></a>👉参考式 ex：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">http://www.google.com "Google"</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">http://www.zhihu.com "zhihu"</span></span><br><span class="line">[<span class="symbol">百度</span>]:<span class="link">http://www.baidu.com "baidu"</span></span><br><span class="line"></span><br><span class="line">我经常用的网站有[<span class="string">google</span>][<span class="symbol">1</span>],[<span class="string">知乎</span>][<span class="symbol">2</span>]和[百度]</span><br></pre></td></tr></table></figure>
<h3 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h3><p>我经常用的网站有<a href="http://www.google.com" title="Google" target="_blank" rel="noopener">google</a>, <a href="http://www.zhihu.com" title="zhihu" target="_blank" rel="noopener">知乎</a>和<a href="http://www.baidu.com" title="baidu" target="_blank" rel="noopener">百度</a><br>注：<br>多用于学术论文上面或一个链接在文章中多处使用的情况</p>
<h2 id="👉自动链接："><a href="#👉自动链接：" class="headerlink" title="👉自动链接："></a>👉自动链接：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">baidu.com</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">google.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h3><p><a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a><br><a href="http://google.com" target="_blank" rel="noopener">http://google.com</a></p>
<hr>
<h1 id="4-图片"><a href="#4-图片" class="headerlink" title="4.图片"></a>4.图片</h1><p>两种形式:行内式和参考式</p>
<h2 id="👉行内式-ex：-1"><a href="#👉行内式-ex：-1" class="headerlink" title="👉行内式 ex："></a>👉行内式 ex：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">格式： ![<span class="string">随意</span>](<span class="link">图片地址 "title"</span>)</span><br><span class="line">注意中英文感叹号！！！</span><br><span class="line"></span><br><span class="line">![<span class="string">巨帅</span>](<span class="link">http://easyread.ph.126.net/ADTAnjLqofbVyKZq6Xq-kg==/6597234693401450458.jpg "Bang"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h3><p><img src="http://easyread.ph.126.net/ADTAnjLqofbVyKZq6Xq-kg==/6597234693401450458.jpg" alt="巨帅" title="Bang"></p>
<h2 id="👉参考式-ex：-1"><a href="#👉参考式-ex：-1" class="headerlink" title="👉参考式 ex："></a>👉参考式 ex：</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">![<span class="string">随意</span>][<span class="symbol">标记</span>]</span><br><span class="line">[<span class="symbol">标记</span>]:<span class="link">图片地址 "title"</span></span><br><span class="line"></span><br><span class="line">![<span class="string">酷</span>][<span class="symbol">我是一个标记</span>]</span><br><span class="line">[<span class="symbol">我是一个标记</span>]:<span class="link">http://img.mp.sohu.com/upload/20170514/c6b047056ff245f9aa7e0d958177a852.png  "Bang"</span></span><br></pre></td></tr></table></figure>
<h3 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h3><p>![酷][我是一个标记]<br>[我是一个标记]:<a href="http://img.mp.sohu.com/upload/20170514/c6b047056ff245f9aa7e0d958177a852.png" target="_blank" rel="noopener">http://img.mp.sohu.com/upload/20170514/c6b047056ff245f9aa7e0d958177a852.png</a>  “Bang”</p>
<p>注：Markdown还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签</p>
]]></content>
  </entry>
  <entry>
    <title>node版本太高导致的问题</title>
    <url>/2020/09/08/node%E7%89%88%E6%9C%AC%E5%A4%AA%E9%AB%98%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>  node 14.0.0 版本太高，导致hexo -p生成静态页面html文件为0kb。（\public）</p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>  win上，卸载高版本node，安装稳定版 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>  其他系统，可用nvm管理node，切换成稳定版</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发的一些小经验</title>
    <url>/2018/08/25/Android%E5%BC%80%E5%8F%91%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="需求：知名网友叫我写一个Android推送的客户端"><a href="#需求：知名网友叫我写一个Android推送的客户端" class="headerlink" title="需求：知名网友叫我写一个Android推送的客户端"></a><strong>需求：</strong>知名网友叫我写一个Android推送的客户端</h1><p>服务器推送<strong><em>文字</em></strong> 消息，客户端用socket实现消息接受，并用状态栏提示消息。</p>
<hr>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a><strong>要点</strong></h1><p>1、socket（tcp）的使用<br>2、主线程不能进行耗时操作<br> -网络操作不能写在主线程<br> -网络操作不能写在主线程<br> -网络操作不能写在主线程<br> （被坑过的我说三遍！当时比较傻X_X）</p>
<p>3、Handler的使用<br>4、Notification的使用<br>5、activity、service之间的通讯(Intent和广播)<br>6、service维护长连接</p>
<hr>
<h1 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h1><p>功能比较简单，就是发送消息，直接贴代码<br>复制粘贴编译运行<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySocketServer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOCKET_PORT = <span class="number">9998</span>;</span><br><span class="line">     <span class="keyword">private</span> ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line">     <span class="keyword">private</span> BufferedWriter writer;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">           MySocketServer socketServer = <span class="keyword">new</span> MySocketServer();</span><br><span class="line">           socketServer.initSocket();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    InetAddress ad=InetAddress.getLocalHost();</span><br><span class="line">                    System.out.println(<span class="string">"本机计算名："</span> + ad.getHostName());</span><br><span class="line">                    System.out.println(<span class="string">"IP地址："</span> + ad.getHostAddress());</span><br><span class="line">                    serverSocket = <span class="keyword">new</span> ServerSocket( SOCKET_PORT);</span><br><span class="line">                    System. out.println( <span class="string">"服务已经启动，端口号:"</span> + SOCKET_PORT);</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">while</span> ( flag) &#123;</span><br><span class="line">                     Socket clientSocket = serverSocket.accept();</span><br><span class="line">                     System.out.println( <span class="string">"有客户端连接"</span> );</span><br><span class="line">                     SocketThread socketThread = <span class="keyword">new</span> SocketThread(clientSocket);</span><br><span class="line">                     socketThread.start();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                      writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">private</span> Socket socket;</span><br><span class="line">            Scanner sc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM-dd HH:mm:ss"</span>);<span class="comment">//转换格式</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">SocketThread</span><span class="params">(Socket clientSocket)</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">this</span>. socket = clientSocket;</span><br><span class="line">           &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">super</span>.run();</span><br><span class="line"> </span><br><span class="line">                InputStream inputStream;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                      <span class="comment">//获取输入流</span></span><br><span class="line">                     inputStream = socket.getInputStream();</span><br><span class="line">                      <span class="comment">//得到读取BufferedReader对象</span></span><br><span class="line">                     reader = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader(inputStream,<span class="string">"utf-8"</span> ));</span><br><span class="line">                     writer = <span class="keyword">new</span> BufferedWriter( <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream(),<span class="string">"utf-8"</span> ));</span><br><span class="line">                     </span><br><span class="line">                     <span class="keyword">while</span> ( flag) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                System. out.println( <span class="string">"发送消息："</span>);</span><br><span class="line">                                sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">                                String str=sc.nextLine();</span><br><span class="line">                                writer.write(<span class="string">"# "</span>+sdf.format(<span class="keyword">new</span> Date()) +<span class="string">":  "</span> +str+<span class="string">"\n"</span> );<span class="comment">//发送时间和输入的信息</span></span><br><span class="line">                                writer.flush();</span><br><span class="line"></span><br><span class="line">                           &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<center>*</center>

<center>*</center>


<hr>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="首先-先实现socket的连接-这里采用tcp"><a href="#首先-先实现socket的连接-这里采用tcp" class="headerlink" title="首先 先实现socket的连接 这里采用tcp"></a>首先 先实现socket的连接 这里采用tcp</h2><p>要求：输入服务器IP和端口（你想要写死也可以）点击按钮开启socket服务</p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p>1、新建一个activity（里面定义一个Button 两个editText）和一个MyService.java<br>2、点击Button，传ip和端口给service并启动<br>3、service生成线程进行socket连接<br>4、接受消息，用Handle更新ui，Notifiction提示消息</p>
<p>新建一个activity，我这里名为SecondActivity,为什么这样取，后面就会知道了 </p>
<p><strong><em>SecondActivity：</em></strong><br>没在<em>AndroidManifest.xml</em>声明的记得声明 后面会贴出整个清单文件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> EditText ssip, ssport;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="keyword">final</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.start); <span class="comment">//我这里对应的布局名为start ，这里就不贴布局文件了</span></span><br><span class="line"></span><br><span class="line">        button = (Button) findViewById(R.id.button2);</span><br><span class="line">        ssip = (EditText) findViewById(R.id.editText3);</span><br><span class="line">        ssport = (EditText) findViewById(R.id.editText2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击事件</span></span><br><span class="line">         button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//调用方法</span></span><br><span class="line">                openService()；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装开启service的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//通过Intent与service通讯并开启service</span></span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(SecondActivity.<span class="keyword">this</span>, MyService.class);</span><br><span class="line">            intent.putExtra(<span class="string">"ip"</span>, ssip.getText().toString()); <span class="comment">//获取输入ip</span></span><br><span class="line">            intent.putExtra(<span class="string">"port"</span>, ssport.getText().toString()); <span class="comment">//获取输入端口</span></span><br><span class="line">            startService(intent);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<center>*</center>

<center>*</center>

<p><strong><em>MyService：</em></strong><br>Service基本上分为两种形式：<strong>启动状态</strong>，即startService()和<strong>绑定状态</strong>，即bindService() <a href="https://blog.csdn.net/javazejian/article/details/52709857" title="https://blog.csdn.net/javazejian/article/details/52709857" target="_blank" rel="noopener">详细</a><br>这里用的是启动状态<br>记得在<em>AndroidManifest.xml</em>声明服务 给足权限<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Notification;</span><br><span class="line"><span class="keyword">import</span> android.app.NotificationChannel;</span><br><span class="line"><span class="keyword">import</span> android.app.NotificationManager;</span><br><span class="line"><span class="keyword">import</span> android.app.PendingIntent;</span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.NotificationCompat;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.content.ContentValues.TAG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> BufferedWriter mWriter;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader mReader;</span><br><span class="line">    <span class="keyword">boolean</span> isReceivingMsgReady;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Notification_ID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String CHANNEL_ID = <span class="string">"channel_id_1"</span>;</span><br><span class="line">    <span class="keyword">final</span> String CHANNEL_NAME = <span class="string">"channel_name_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> String ssip, temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ssport;</span><br><span class="line">    <span class="keyword">private</span> String sb, string;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用handler更新ui</span></span><br><span class="line">    <span class="keyword">public</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sb = msg.obj.toString(); <span class="comment">//接收数据 </span></span><br><span class="line">                        sendNotification(sb);<span class="comment">//状态栏通知消息</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"已经连接服务器"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"服务器已断开"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//必须复写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里进行初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">       Log.d(TAG, <span class="string">"onCreate: ############"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里会传进一个intent</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onStartCommand: ############"</span>);</span><br><span class="line"></span><br><span class="line">        ssip = intent.getStringExtra(<span class="string">"ip"</span>); <span class="comment">//获取SecondActivity传来的IP和端口</span></span><br><span class="line">        temp = intent.getStringExtra(<span class="string">"port"</span>);</span><br><span class="line">        ssport = Integer.parseInt(temp); <span class="comment">//String 转int</span></span><br><span class="line">        <span class="keyword">if</span> (!isReceivingMsgReady) <span class="comment">//没有这个，你点一次按钮，就创建一个线程，浪费资源</span></span><br><span class="line">            initSocket(ssip, ssport); <span class="comment">//调用方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        stopSelf();</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy: ############"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//socket连接</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSocket</span><span class="params">(<span class="keyword">final</span> String ip, <span class="keyword">final</span> <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//来个线程 service中也是不能直接进行耗时操作的</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//在子线程中初始化Socket对象</span></span><br><span class="line">                    clientSocket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//根据clientSocket.getInputStream得到BufferedReader对象，从而从输入流中获取数据</span></span><br><span class="line">                </span><br><span class="line">                    isReceivingMsgReady = <span class="keyword">true</span>;</span><br><span class="line">                    mReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//根据clientSocket.getOutputStream得到BufferedWriter对象，从而从输出流中获取数据</span></span><br><span class="line">                    mWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(clientSocket.getOutputStream(), <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">                    clientSocket.sendUrgentData(<span class="number">0xFF</span>); <span class="comment">//心跳包，不知道是不是这样用。 这行可以不要</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//判断socket有无断开，一个特别简陋的方法</span></span><br><span class="line">                    <span class="keyword">if</span> (!clientSocket.isOutputShutdown()) &#123;</span><br><span class="line">                        mHandler.sendEmptyMessage(<span class="number">1</span>);<span class="comment">//toast通知已连接</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (isReceivingMsgReady) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mReader.ready()) &#123;</span><br><span class="line">                                string = mReader.readLine(); <span class="comment">//读取数据，这里要了解readLine()的特性。</span></span><br><span class="line">                                mHandler.obtainMessage(<span class="number">0</span>, string).sendToTarget();<span class="comment">//发送数据给handle，通知更新ui</span></span><br><span class="line"></span><br><span class="line">                                Notification_ID++;<span class="comment">//修改id，确保不覆盖消息，一条消息对应一个notification</span></span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        mWriter.close();</span><br><span class="line">                        mReader.close();</span><br><span class="line">                        clientSocket.close();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mHandler.sendEmptyMessage(<span class="number">2</span>);toast通知</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态通知服务器消息 这里要注意api的版本，我使用的方法是较新的</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">            <span class="comment">//只在Android O之上需要渠道</span></span><br><span class="line">            NotificationChannel notificationChannel = <span class="keyword">new</span> NotificationChannel(CHANNEL_ID,</span><br><span class="line">                    CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">            <span class="comment">//如果这里用IMPORTANCE_NOENE就需要在系统的设置里面开启渠道，</span></span><br><span class="line">            <span class="comment">//通知才能正常弹出</span></span><br><span class="line">            manager.createNotificationChannel(notificationChannel);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        builder.setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setContentTitle(<span class="string">"_(:3」∠❀)_"</span>)<span class="comment">//通知标题</span></span><br><span class="line">                .setContentText(str)<span class="comment">//通知内容</span></span><br><span class="line">                .setAutoCancel(<span class="keyword">true</span>) </span><br><span class="line">                .setDefaults(Notification.DEFAULT_ALL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        manager.notify(Notification_ID, builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>至此，基本实现推送功能。<br>下面是我纯粹为了锻炼开发能力而添加的功能<br>没有兴趣的读者可跳过</strong></p>
<hr>
<h2 id="优化添加功能"><a href="#优化添加功能" class="headerlink" title="优化添加功能"></a>优化添加功能</h2><p>要添加的功能：<br>1、监听返回键，按两次退出应用<br>2、新建一个activity来显示所有接收的消息（广播）<br>3、记住ip和端口<br>4、来个自己的应用启动页</p>
 <center>*</center>

 <center>*</center>

 <center>*</center>

<h3 id="🌑监听返回键，按两次退出应用"><a href="#🌑监听返回键，按两次退出应用" class="headerlink" title="🌑监听返回键，按两次退出应用"></a>🌑监听返回键，按两次退出应用</h3><p>这里要复写activity的onKeyDown方法<br>想要哪个activity有此功能，就把下面代码复制在哪个activity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class="number">0</span>) &#123;</span><br><span class="line">        exit();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((System.currentTimeMillis() - mExitTime) &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"再按一次退出应用"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        mExitTime = System.currentTimeMillis();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//用户退出处理</span></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<center>*</center>

 <center>*</center>

 <center>*</center>

<h3 id="🌒新建一个activity来显示所有接收的消息"><a href="#🌒新建一个activity来显示所有接收的消息" class="headerlink" title="🌒新建一个activity来显示所有接收的消息"></a>🌒新建一个activity来显示所有接收的消息</h3><p>这里会实现<br>1、textview的竖直滚动，自动最后一行<br>2、获取本机ip（WiFi和GPRS）<br>3、广播接收Myservice传来的信息（成员内部类）</p>
<p>下面都会封装成方法<br>这里我命名为MainActivity（定义一个Button，两个TextView），对应布局为activity_main.xml<br>显示消息的textview 在布局文件中添加以下属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:enabled="true"</span><br><span class="line">android:textIsSelectable="true"</span><br><span class="line">android:focusable="true"</span><br><span class="line">android:longClickable="true"</span><br><span class="line">android:scrollbarFadeDuration="2000"</span><br><span class="line">android:scrollbars="none"</span><br><span class="line">android:fadeScrollbars="false"</span><br><span class="line">android:maxLines="28" //行数自定义</span><br></pre></td></tr></table></figure>
<p><strong><em>MainActivity：</em></strong><br>记得声明<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.IntentFilter;</span><br><span class="line"><span class="keyword">import</span> android.net.ConnectivityManager;</span><br><span class="line"><span class="keyword">import</span> android.net.NetworkInfo;</span><br><span class="line"><span class="keyword">import</span> android.net.wifi.WifiInfo;</span><br><span class="line"><span class="keyword">import</span> android.net.wifi.WifiManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.net.Inet4Address;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> TextView textview, iptv;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">private</span> Intent MyserviceIntent;</span><br><span class="line">    <span class="keyword">private</span> String getMyservice;</span><br><span class="line">    <span class="keyword">int</span> scrollAmount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mExitTime;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="keyword">final</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        button = (Button) findViewById(R.id.button);<span class="comment">//用来结束service，退出应用</span></span><br><span class="line">        textview = (TextView) findViewById(R.id.textview);<span class="comment">//显示消息</span></span><br><span class="line">        iptv = (TextView) findViewById(R.id.iptextView);</span><br><span class="line"></span><br><span class="line">        ConnectivityManager conMann = (ConnectivityManager) <span class="keyword">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        NetworkInfo mobileNetworkInfo = conMann.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);</span><br><span class="line">        NetworkInfo wifiNetworkInfo = conMann.getNetworkInfo(ConnectivityManager.TYPE_WIFI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化广播接受器并动态注册</span></span><br><span class="line">        <span class="keyword">final</span> MsgReceiver msgReceiver = <span class="keyword">new</span> MsgReceiver();<span class="comment">//实例化就可接受广播</span></span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">"com.daby.communication.RECEIVER"</span>);</span><br><span class="line">        registerReceiver(msgReceiver, intentFilter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断网络类型 并获取IP</span></span><br><span class="line">        <span class="keyword">if</span> (mobileNetworkInfo.isConnected()) &#123;</span><br><span class="line">            ip = getLocalIpAddress();</span><br><span class="line">            iptv.setText(getString(R.string.ipname) + ip);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wifiNetworkInfo.isConnected()) &#123;</span><br><span class="line">            iptv.setText(getString(R.string.ipname) + wifigetIP(ip));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        MyserviceIntent = <span class="keyword">new</span> Intent(getApplication(), MyService.class);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(getApplication(),<span class="string">"已断开服务器连接"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                stopService(MyserviceIntent);</span><br><span class="line">                finish();</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取GPRS ip</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getLocalIpAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ip = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">                 en.hasMoreElements(); ) &#123;</span><br><span class="line">                NetworkInterface intf = en.nextElement();</span><br><span class="line">                <span class="keyword">for</span> (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses();</span><br><span class="line">                     enumIpAddr.hasMoreElements(); ) &#123;</span><br><span class="line">                    InetAddress inetAddress = enumIpAddr.nextElement();</span><br><span class="line">                    <span class="keyword">if</span> (!inetAddress.isLoopbackAddress() &amp;&amp; inetAddress <span class="keyword">instanceof</span> Inet4Address) &#123;</span><br><span class="line"></span><br><span class="line">                        ip = inetAddress.getHostAddress().toString();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(ip)) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ip = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取wifi ip</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">wifigetIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取WiFi服务</span></span><br><span class="line">        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        <span class="comment">//判断WiFi是否开启</span></span><br><span class="line">        <span class="keyword">if</span> (!wifiManager.isWifiEnabled()) &#123;</span><br><span class="line">            wifiManager.setWifiEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        WifiInfo wifiInfo = wifiManager.getConnectionInfo();</span><br><span class="line">        <span class="keyword">int</span> ipaddress = wifiInfo.getIpAddress();</span><br><span class="line">        ip = intTolp(ipaddress);<span class="comment">//调用格式转换</span></span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//wifi ip格式转换</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">intTolp</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (i &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> + ((i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> + ((i &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) + <span class="string">"."</span> + (i &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员内部类，接受来自Myservice的广播</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MsgReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            getMyservice = intent.getStringExtra(<span class="string">"Tomian"</span>);</span><br><span class="line">            sb.append(getMyservice + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            textview.setText(sb);</span><br><span class="line">            <span class="comment">//滚动显示</span></span><br><span class="line">            textview.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">             scrollAmount = textview.getLayout().getLineTop(textview.getLineCount()) - textview.getHeight();</span><br><span class="line">                    <span class="keyword">if</span> (scrollAmount &gt; <span class="number">0</span>)</span><br><span class="line">                        textview.scrollTo(<span class="number">0</span>, scrollAmount);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        textview.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听返回键，按两次退出</span></span><br><span class="line">    <span class="comment">//为了代码看起来不多，这里就简写了！！！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<center>*</center>

<center>*</center>





<p>在<strong><em>Myservice</em></strong>进行修改发送广播<br><strong>！！！</strong>上面有的未修改代码简写<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;...&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里添加 点击状态栏消息跳转MainActivity的功能</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(getApplication(), MainActivity.class);</span><br><span class="line">        PendingIntent contentIntent = PendingIntent.getActivity(getApplication(), <span class="number">0</span>,  intent, PendingIntent.FLAG_UPDATE_CURRENT);<span class="comment">//这里需要了解第四个参数</span></span><br><span class="line">        NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, CHANNEL_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        builder.setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setContentTitle(<span class="string">"_(:3」∠❀)_"</span>)</span><br><span class="line">                .setContentText(str)</span><br><span class="line">                .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                .setContentIntent(contentIntent)<span class="comment">//添加设置Intent，跳转</span></span><br><span class="line">                .setDefaults(Notification.DEFAULT_ALL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        manager.notify(Notification_ID, builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSocket</span><span class="params">(<span class="keyword">final</span> String ip, <span class="keyword">final</span> <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//在子线程中初始化Socket对象</span></span><br><span class="line">                    clientSocket = <span class="keyword">new</span> Socket...</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!clientSocket.isOutputShutdown()) &#123;</span><br><span class="line">                        mHandler.sendEmptyMessage(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (isReceivingMsgReady) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mReader.ready()) &#123;</span><br><span class="line">                                string = mReader.readLine(); <span class="comment">//这里要了解readLine()的特性。</span></span><br><span class="line">                                mHandler.obtainMessage(<span class="number">0</span>, string).sendToTarget();</span><br><span class="line"></span><br><span class="line">                                TomainIntent.putExtra(<span class="string">"Tomian"</span>, string);</span><br><span class="line">                                Notification_ID++;</span><br><span class="line">                                sendBroadcast(TomainIntent);<span class="comment">//添加发送广播</span></span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        mWriter.close();</span><br><span class="line">                        mReader.close();</span><br><span class="line">                        clientSocket.close();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mHandler.sendEmptyMessage(<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<center>*</center>

<center>*</center>

<h3 id="🌓记住ip和端口"><a href="#🌓记住ip和端口" class="headerlink" title="🌓记住ip和端口"></a>🌓记住ip和端口</h3><p>修改<strong><em>SecondActivity</em></strong><br>添加CheckBox，用SharedPreferences保存ip和端口<br>连接后跳转到<strong><em>MainActivity</em></strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> CheckBox checkBox;</span><br><span class="line">    <span class="keyword">private</span> EditText ssip, ssport;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferences sharedPreferences;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferences.Editor editor;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mExitTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="keyword">final</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.start);</span><br><span class="line"></span><br><span class="line">        button = (Button) findViewById(R.id.button2);</span><br><span class="line">        checkBox = (CheckBox) findViewById(R.id.checkbox);</span><br><span class="line">        ssip = (EditText) findViewById(R.id.editText3);</span><br><span class="line">        ssport = (EditText) findViewById(R.id.editText2);</span><br><span class="line"></span><br><span class="line">        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">boolean</span> pang = sharedPreferences.getBoolean(<span class="string">"remember_servic"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        Toast.makeText(SecondActivity.<span class="keyword">this</span>, <span class="string">"空哦"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pang)<span class="comment">//第一次运行 pang=false</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            ssip.setText(sharedPreferences.getString(<span class="string">"ip"</span>, <span class="string">""</span>));     <span class="comment">//读取数据</span></span><br><span class="line">            ssport.setText(sharedPreferences.getString(<span class="string">"port"</span>, <span class="string">""</span>));<span class="comment">//读取数据</span></span><br><span class="line">            checkBox.setChecked(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                remb();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(SecondActivity.<span class="keyword">this</span>, MyService.class);</span><br><span class="line">            intent.putExtra(<span class="string">"ip"</span>, ssip.getText().toString());</span><br><span class="line">            intent.putExtra(<span class="string">"port"</span>, ssport.getText().toString());</span><br><span class="line">            startService(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接成功后开启MainActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent2 = <span class="keyword">new</span> Intent(SecondActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">        startActivity(intent2);</span><br><span class="line">        overridePendingTransition(R.anim.open_in, R.anim.open_out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装记住密码方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        editor = sharedPreferences.edit();</span><br><span class="line">        String tempip = ssip.getText().toString();</span><br><span class="line">        String tempport = ssport.getText().toString();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//判断一下输入IP和端口是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (!tempip.isEmpty() &amp;&amp; !tempport.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkBox.isChecked()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//存放数据</span></span><br><span class="line">                editor.putString(<span class="string">"ip"</span>, tempip); </span><br><span class="line">                editor.putString(<span class="string">"port"</span>, tempport);</span><br><span class="line">                editor.putBoolean(<span class="string">"remember_service"</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                editor.clear();<span class="comment">//所有信息全部进行清空</span></span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            editor.apply();<span class="comment">//apply是将修改数据原子提交到内存，而后异步真正提交到硬件磁盘</span></span><br><span class="line">            openService();</span><br><span class="line">            openActivity();</span><br><span class="line">            finish();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mHandler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<center>*</center>

<center>*</center>

<h3 id="🌕来个自己的应用启动页"><a href="#🌕来个自己的应用启动页" class="headerlink" title="🌕来个自己的应用启动页"></a>🌕来个自己的应用启动页</h3><p>1、新建一个activity（名为FirstActivity）对应布局welcome.xml<br>2、定义一个ImageView 添加自己喜欢的图片，可以直接铺满activity<br>我这里添加一个小logo，并实现旋转动画</p>
<p><strong>注意：</strong> <strong><em>FirstActivity</em></strong>继承的是AppCompatActivity，直接继承Activity后，<br>ImageView添加图片不显示，且使用隐藏的状态栏和标题栏的方法也不一样</p>
<p><strong><em>FirstActivity：</em></strong><br>记得声明<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AnimationUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//隐藏状态栏和标题栏，注意要写在setContentView前面</span></span><br><span class="line">        getSupportActionBar().hide();</span><br><span class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">        setContentView(R.layout.welcome);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现动画,</span></span><br><span class="line">        Animation rotate = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.rotate_anim);<span class="comment">//这里需要添加动画文件（名为rotate_anim.xml），放在res/anim/ 目录下</span></span><br><span class="line">        LinearInterpolator lin = <span class="keyword">new</span> LinearInterpolator();</span><br><span class="line">        rotate.setInterpolator(lin);</span><br><span class="line">        ((ImageView)findViewById(R.id.imageView3)).setAnimation(rotate);</span><br><span class="line">        ((ImageView)findViewById(R.id.imageView3)).startAnimation(rotate);</span><br><span class="line"></span><br><span class="line">        Handler hd = <span class="keyword">new</span> Handler();</span><br><span class="line">        hd.postDelayed(<span class="keyword">new</span> splashhandler(), <span class="number">1150</span>);<span class="comment">//开启SecondActivity，1150是延迟操作的时间，单位毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">splashhandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(getApplication(), SecondActivity.class));</span><br><span class="line">            overridePendingTransition(R.anim.open_in, R.anim.open_out);<span class="comment">//这里添加activity开启的动画。同样在在res/anim/ 目录下</span></span><br><span class="line">            FirstActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<center>*</center>

<p><strong><em>rotate_anim：</em></strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/cycle_interpolator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"359"</span>                //具体参数可自己查询</span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span> = <span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:repeatCount</span> = <span class="string">"-1"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visible</span> = <span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rotate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<center>*</center>

<p><strong><em>open_in：</em></strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">"100%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_mediumAnimTime"</span>        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<center>*</center>

<p><strong><em>open_out：</em></strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">"-100%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_mediumAnimTime"</span>    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- android:duration是动画时间--&gt;</span></span><br></pre></td></tr></table></figure></p>
 <center>*</center>

 <center>*</center>

 <center>*</center>


<hr>
<h1 id="总清单文件"><a href="#总清单文件" class="headerlink" title="总清单文件"></a>总清单文件</h1><p><strong><em>AndroidManifest.xml：</em></strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.daby.handlerdemo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.FLASHLIGHT"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span>&gt;</span>//这里设置FirstActivity为首个activity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span> //singleTask 非常重要，MainActivity被放入后台后，返回不会生成新的activity，保证数据不被清掉</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyService"</span> /&gt;</span> //声明服务</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
 <center>*</center>

 <center>*</center>

 <center>*</center>

 <center>======The end======</center>

]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在coding，Hexo博客加载失败的问题</title>
    <url>/2018/08/30/%E5%85%B3%E4%BA%8E%E5%9C%A8coding%EF%BC%8CHexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong><br>将hexo部署到coding，访问成功但是网页加载失败！！！<br>度娘找原因：<br>coding创建项目的名字必须和coding用户名保持一致，不能自己随便自定义否则将会加载失败<br>和github一样。。。。。
</strong><br><img src="https://cdn.ruguoapp.com/3949c8a5069a4b4c92b9a36c4ae0e63d?imageMogr2/auto-orient/heic-exif/1/thumbnail/400x2000%3E/quality/70/interlace/1" align="left" width="100" height="100"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>创建短链接</title>
    <url>/2020/09/08/%E5%88%9B%E5%BB%BA%E7%9F%AD%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="MiniUrl"><a href="#MiniUrl" class="headerlink" title="MiniUrl"></a>MiniUrl</h1><p><strong><a href="https://121.37.5.27" target="_blank" rel="noopener">https://121.37.5.27</a> </strong></p>
]]></content>
  </entry>
  <entry>
    <title>关于如何解决hexo archer 主题 统计功能失效的方法</title>
    <url>/2018/12/06/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3hexo-archer-%E4%B8%BB%E9%A2%98-%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD%E5%A4%B1%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="最近突然发现archer主题的统计功能失效"><a href="#最近突然发现archer主题的统计功能失效" class="headerlink" title="最近突然发现archer主题的统计功能失效"></a>最近突然发现archer主题的统计功能失效</h1><p><strong> 参考next主题的解决方法 </strong> <a href="https://blog.csdn.net/qijian2003122/article/details/82987577?utm_source=blogxgwz0" target="_blank" rel="noopener">https://blog.csdn.net/qijian…</a><br><strong> 终于将这一问题解决 </strong><br><strong> 先找到 <em>layout.ejs</em> 这一文件 </strong><br><strong> 路径如下：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">\themes\archer\layout\layout.ejs</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">找到如下代码：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">修改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">--------------------- </span><br><span class="line"></span><br><span class="line">完美解决</span><br></pre></td></tr></table></figure>
<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1328108106,2840959407&fm=26&gp=0.jpg" align="center" height="350" width="350"> </p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>stl容器用法（转载）</title>
    <url>/2020/09/08/stl/</url>
    <content><![CDATA[<h1 id="1-导论"><a href="#1-导论" class="headerlink" title="1.导论"></a><em>1.导论</em></h1><p>可大致分为顺序容器和关联容器:顺序容器通过元素在容器中的位置顺序存储和访问元素,而关联容器则是通过键(key)存储和读取元素的。</p>
<p><strong>顺序容器</strong>的元素必须是严格的线性顺序储存。因此序列中的元素具有确定的顺序，可以执行将值插入到特定位置、删除特定区间等操作。因此这些容器都是可遍历的.</p>
<ul>
<li>string</li>
<li>vector</li>
<li>deque</li>
<li>list</li>
</ul>
<p>另外堆栈, 队列等在STL中也属于顺序容器, 但为保证效率只实现了基本的用法(FIFO/FILO), 不可遍历, 在此将其单独列出. <strong>注意deque与vector类似, 与queue不同</strong></p>
<ul>
<li>stack</li>
<li>queue</li>
<li>priority_queue</li>
</ul>
<p><strong>关联容器</strong>主要有map和set。map是key-value形式的，set是单值。map和set只能存放唯一的key值，multimap和multiset可以存放多个相同的key值。unordered无序容器底层实现为hash表，随机访问速度快但空间占用较高，在追求运行速度的程序中使用。其包括在boost库准标准库中, bits/stdc++.h没有包括, 使用时需要主动include.</p>
<ul>
<li>map</li>
<li>set</li>
<li>multimap</li>
<li>multiset</li>
<li>unordered_map</li>
<li>unordered_set</li>
</ul>
<hr>
<h1 id="2-string部分"><a href="#2-string部分" class="headerlink" title="2.string部分"></a><em>2.string部分</em></h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化"><a href="#赋值初始化" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本赋值+初始化</span></span><br><span class="line"><span class="built_in">string</span> s;  <span class="comment">// 生成一个空字符串s </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str)</span> </span>; <span class="comment">// 拷贝构造函数生成str的复制品 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr)</span> </span>;  <span class="comment">// 将C字符串（以NULL结束）作为s的初值 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(“value”)</span></span>;  <span class="built_in">string</span> s=“value”;  <span class="comment">// 将s初始化为一个字符串字面值副本</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(num, ‘c’)</span> </span>;  <span class="comment">// 生成一个字符串，包含num个c字符 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str, stridx)</span></span>;  <span class="comment">// 将字符串str内"始于位置stridx"的部分当作字符串的初值 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str, stridx, <span class="built_in">strlen</span>)</span> </span>; <span class="comment">// 将字符串str内"始于stridx且长度顶多strlen"的部分作为字符串的初值 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr, cstr_len)</span> </span>;  <span class="comment">// 将C字符串前cstr_len个字符作为字符串s的初值。 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(begin, end)</span></span>;  <span class="comment">// 以区间begin/end(不包含end)内的字符作为字符串s的初值 </span></span><br><span class="line">s.~<span class="built_in">string</span>();  <span class="comment">//虚构函数，释放内存</span></span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数"><a href="#常用成员函数" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s[n]; a.at(n) <span class="comment">// 从0开始相当于下标访问 </span></span><br><span class="line">s1+s2;  <span class="comment">// 把s1和s2连接成新串 返回新串</span></span><br><span class="line">s1==s2; s1.compare(s2)  <span class="comment">// 比较，相等返回true </span></span><br><span class="line">+=, s.append(), s.push_back() <span class="comment">// 在尾部添加字符 </span></span><br><span class="line">s.empty(); <span class="comment">//检查字符串是否为空</span></span><br><span class="line">s.length(); s.size() <span class="comment">//返回字符串长度 </span></span><br><span class="line">s.substr(<span class="number">5</span>,<span class="number">6</span>); <span class="comment">// 从索引5开始的6个字符, 注意不是下标5到下标6!!!!!!! </span></span><br><span class="line">s.find(<span class="string">"target"</span>,pos) <span class="comment">//从下标pos开始查找字符串返回位置, 无结果返回string::npos</span></span><br><span class="line">s.rfind(<span class="string">"target"</span>,pos) <span class="comment">//反向查找, 返回最后一次出现的位置</span></span><br><span class="line">s.begin(); s.end() <span class="comment">// 提供迭代器</span></span><br><span class="line">transform(s.begin(),s.end(),s.begin(),::<span class="built_in">tolower</span>) <span class="comment">//转为小写</span></span><br><span class="line">transform(s.begin(),s.end(),s.begin(),::<span class="built_in">toupper</span>) <span class="comment">//转为大写</span></span><br><span class="line"><span class="comment">//↑高频函数#############################################################</span></span><br><span class="line">s.insert(<span class="number">0</span>,<span class="string">"target"</span>) <span class="comment">// 在下标n前插入字符串 </span></span><br><span class="line">s.erase(n,m) <span class="comment">// 删除字符下标n开始的m个字符 </span></span><br><span class="line">s.clear() <span class="comment">// 删除全部字符 </span></span><br><span class="line">s.replace(p,n,<span class="string">"target"</span>) <span class="comment">// 替换p开始的n字符为target </span></span><br><span class="line"><span class="built_in">string</span>::swap() <span class="comment">// 交换两个字符串的内容 </span></span><br><span class="line">s.capacity() <span class="comment">// 返回重新分配之前的字符容量 </span></span><br><span class="line">s.c_str() <span class="comment">// 返回一个指向正规C字符串(C_string)的指针 内容与本string串相同 有’\0’ </span></span><br><span class="line">s.data() <span class="comment">// 将内容以字符数组形式返回 无’\0’ </span></span><br><span class="line">s.rbegin(); s.rend() <span class="comment">// 提供反向迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;  <span class="comment">// 从输入流cin中读取一个以空白字符分割的字符串，写入s</span></span><br><span class="line">getline(<span class="built_in">cin</span>, s);  <span class="comment">// 从输入流cin中读取一行字符，写入s，直到遇到分行符或到了文件尾</span></span><br><span class="line">os &lt;&lt; s; <span class="comment">// 将s写到输出流os中</span></span><br><span class="line"><span class="built_in">stringstream</span> strm; <span class="comment">// 创建自由的stringstream对象</span></span><br><span class="line">strm.str(); <span class="comment">// 返回strm中存储的string类型对象</span></span><br><span class="line">strm.str(s); <span class="comment">// 将string类型的s复制给strm 返回void</span></span><br><span class="line">stream&lt;&lt;<span class="string">"10000"</span>; <span class="comment">//string到int的转换</span></span><br><span class="line">stream&gt;&gt;n;  <span class="comment">// int n等于10000</span></span><br><span class="line">to_string(val)	<span class="comment">//把val转换成string, C++11后支持</span></span><br><span class="line">itoa(val, ch, <span class="number">10</span>);<span class="comment">//把val转换成10进制char[], windows支持</span></span><br><span class="line">stoi(s,p,b)	<span class="comment">//把字符串s从p开始转换成b进制的int</span></span><br><span class="line">stoll(s,p,b)<span class="comment">//同上long long</span></span><br><span class="line">stof(s,p)	<span class="comment">//同上float</span></span><br><span class="line">stod(s,p)	<span class="comment">//同上double</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-vector部分"><a href="#3-vector部分" class="headerlink" title="3.vector部分"></a><em>3.vector部分</em></h1><p>vector是数组的一种类表示，它有以下优点：自动管理内存、动态改变长度并随着元素的增减而增大或缩小。 在尾部添加元素是固定时间，在头部或中间添加或删除元素是线性时间。</p>
<h2 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化-1"><a href="#赋值初始化-1" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>); <span class="comment">//定义了10个整型元素的向量，但没有给出初值，其值是不确定的。</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>,<span class="number">1</span>); <span class="comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b); <span class="comment">//用b向量来创建a向量，整体复制性赋值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b.begin(),b.begin+<span class="number">3</span>); <span class="comment">//定义了a值为b中第0个到第2个（共3个）元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b,b+<span class="number">7</span>); <span class="comment">//从数组b[7]中获得初值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a; <span class="comment">//二维vector</span></span><br><span class="line">a.assign(<span class="number">4</span>,<span class="number">2</span>); <span class="comment">//是a只含4个元素，且每个元素为2</span></span><br><span class="line">a.assign(b.begin(), b.begin()+<span class="number">3</span>); <span class="comment">//b为向量，将b的0~2个元素构成的向量赋给a</span></span><br><span class="line">a.clear(); <span class="comment">//清空a中的元素</span></span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数-1"><a href="#常用成员函数-1" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a==b; <span class="comment">//b为向量，向量的比较操作还有!=,&gt;=,&lt;=,&gt;,&lt;</span></span><br><span class="line">a[i]; <span class="comment">//返回a的第i个元素，当且仅当a[i]存在</span></span><br><span class="line">a.empty(); <span class="comment">//判断a是否为空，空则返回ture,不空则返回false</span></span><br><span class="line">a.size(); <span class="comment">//返回a中元素的个数；</span></span><br><span class="line">a.capacity(); <span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">a.front(); <span class="comment">//返回a的第一个元素</span></span><br><span class="line">a.back(); <span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.begin(); <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">a.end(); <span class="comment">//返回指向最后一个元素的下一个位置的迭代器</span></span><br><span class="line">a.push_back(<span class="number">5</span>); <span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.pop_back(); <span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line"><span class="comment">//↑高频函数#############################################################</span></span><br><span class="line"><span class="built_in">vector</span>::get_allocator(); <span class="comment">//适用构造函数返回一个拷贝</span></span><br><span class="line">a.erase(a.begin()+<span class="number">1</span>,a.begin()+<span class="number">3</span>); <span class="comment">//删除a中第1个（从第0个算起）到第3个元素, 左闭右开区间</span></span><br><span class="line">a.insert(a.begin(),<span class="number">5</span>); <span class="comment">//在a的第0个元素前插入数值5，</span></span><br><span class="line">a.insert(a.begin(),<span class="number">3</span>,<span class="number">5</span>); <span class="comment">//在a的第0个元素的位置插入3个数，其值都为5</span></span><br><span class="line">a.insert(a.begin(),b+<span class="number">3</span>,b+<span class="number">6</span>); <span class="comment">//b为数组，在a的第0个元素的位置插入b的第3个元素到第5个元素, 左闭右开区间</span></span><br><span class="line">a.resize(<span class="number">10</span>); <span class="comment">//将a的现有元素个数调至10个，多删，少补，其值随机</span></span><br><span class="line">a.resize(<span class="number">10</span>,<span class="number">0</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值为0</span></span><br><span class="line">a.reserve(<span class="number">100</span>); <span class="comment">//将a的容量（capacity）扩充至100，填充大量数据时使用, 避免频繁分配空间</span></span><br><span class="line">a.max_size(); <span class="comment">//返回当前库/系统中vector所能储存的最大的元素量</span></span><br><span class="line">a.swap(b); <span class="comment">//b为向量，将a中的元素和b中的元素进行整体性交换</span></span><br><span class="line">swap(a,b); <span class="comment">//同上</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="4-stack部分"><a href="#4-stack部分" class="headerlink" title="4.stack部分"></a><em>4.stack部分</em></h1><p>Stack(栈)是一种后进先出的数据结构，也就是LIFO(last in first out) ，最后加入栈的元素将最先被取出来，在栈的同一端进行数据的插入与取出，这一段叫做“栈顶”。stack不允许随机访问栈元素，不允许遍历栈，把使用限制在定义栈的基本操作上</p>
<h2 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h2><p><code>#include &lt;stack&gt;</code></p>
<h2 id="赋值初始化-2"><a href="#赋值初始化-2" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><p>创建堆栈时，不能在初始化列表中用对象来初始化，但是可以用另一个容器来初始化，<strong>只要堆栈的底层容器类型和这个容器的类型相同。</strong> 如果没有在第二个 stack 模板类型参数中将底层容器指定为 list，那么底层容器可能是 deque，这样就不能用 list 的内容来初始化 stack；只能接受 deque。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt; v_list = &#123;<span class="number">1.414</span>, <span class="number">3.14159265</span>, <span class="number">2.71828</span>&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">double</span>,<span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt;&gt; my_stack (v_list);</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; v (<span class="number">3</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; my_stack (v);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; my_stack; <span class="comment">//显式用vector&lt;int&gt;实现一个栈</span></span><br></pre></td></tr></table></figure></p>
<h2 id="常用成员函数-2"><a href="#常用成员函数-2" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.push(n) <span class="comment">//将n压入栈顶, 没有返回值</span></span><br><span class="line">s.empty() <span class="comment">//在栈中没有元素的情况下返回 true。</span></span><br><span class="line">s.size() <span class="comment">//返回栈中元素的个数。</span></span><br><span class="line">s.top() <span class="comment">//返回一个栈顶元素的引用, 注意并不会弹出元素. 如果栈为空，返回值未定义。</span></span><br><span class="line">s.pop() <span class="comment">//弹出栈顶元素, 通常接着top()使用</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="5-queue-deque-priority-queue"><a href="#5-queue-deque-priority-queue" class="headerlink" title="5. queue/deque/priority_queue"></a><em>5. queue/deque/priority_queue</em></h1><p>queue的效率堪比手写队列, 只有队列的基本操作。不允许随机访问和遍历。<br>deque模版类 double-ended queue(双端队列) ，支持随机访问，在deque对象的开始位置插入和删除元素是固定时间。所以应用场景为频繁操作序列的起始和结尾处。为实现在两端执行插入和删除操作的时间为固定的这一目的，deque对象的设计比vector对象更为复杂。因此，尽管两者都提供对元素的随机访问和执行线性时间的插入删除操作，但是vector容器执行这些时速度还要快些。<br>priority_queue，和queue的区别在于，最大的元素被移到队首。内部区别在于，默认的底层类是vector。可以修改用于确定哪个元素放到队首的比较方式。方法是提供一个构造函数。</p>
<h2 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;priority_queue&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化-3"><a href="#赋值初始化-3" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq(size);  <span class="comment">// 声明一个含有size个默认值初始化元素</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq(size, value);  <span class="comment">//同上, 含有size个value元素</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq(mydeque);  <span class="comment">// 创建一个副本</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq(beg, end);  <span class="comment">// 使用迭代器first、last范围内的元素初始化de</span></span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数-3"><a href="#常用成员函数-3" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deq[]    <span class="comment">//用来访问双向队列中单个的元素。</span></span><br><span class="line">deq.front()    <span class="comment">//返回第一个元素的引用。</span></span><br><span class="line">deq.back()    <span class="comment">//返回最后一个元素的引用。</span></span><br><span class="line">deq.push_front(x)    <span class="comment">//把元素x插入到双向队列的头部。</span></span><br><span class="line">deq.push_back(x)    <span class="comment">//把元素x插入到双向队列的尾部。</span></span><br><span class="line">deq.pop_front()    <span class="comment">//弹出双向队列的第一个元素。</span></span><br><span class="line">deq.pop_back()    <span class="comment">//弹出双向队列的最后一个元素。</span></span><br><span class="line"><span class="comment">//注意, deque不提供容量操作capacity()和reverse()</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="6-list-foward-list"><a href="#6-list-foward-list" class="headerlink" title="6. list/foward_list"></a><em>6. list/foward_list</em></h1><p>list（双向链表），除了第一个和最后一个元素外，每个元素都与前后的元素相连接，这意味着可以双向遍历链表，list和vector之间关键区别在于，list在链表中任一位置进行插入和删除的时间都是固定的。vector强调的快速随机访问，而list强调的是元素的快速插入和删除。<br>list也可以反转容器，list不支持数组表示法和随机访问。list是一个双向链表，而单链表对应的容器则是<strong>foward_list</strong>, 不同于list，forward_list是不可反转的容器。<br>与矢量迭代器不同，从容器中插入或删除元素之后，链表迭代器指向的元素不变。这与链表的特性有关<br>值得注意的是，list容器<strong>不能调用algorithm下的sort函数进行排序</strong>，因为sort函数要求容器必须可以随机存储，而list做不到。所以，list自己做了一个自己用的排序函数list.sort()</p>
<h2 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;forward_list&gt; //注意, 此头文件不被bits/stdc++.h包括</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化-4"><a href="#赋值初始化-4" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l0 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1(a, a+<span class="number">5</span>);  <span class="comment">//将数组a的内容赋值给l1</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l2(size,val);  <span class="comment">//赋值size个值为val的元素</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l3(l2);</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l4(beg, end);</span><br><span class="line"><span class="built_in">list</span>.assign(<span class="number">7</span>,<span class="number">100</span>);  <span class="comment">//给first添加7个值为100的元素</span></span><br><span class="line"><span class="built_in">list</span>.assign(l1.begin(), l1.end());</span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数-4"><a href="#常用成员函数-4" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">l.begin()</span><br><span class="line">l.end()</span><br><span class="line">l.front()</span><br><span class="line">l.back()</span><br><span class="line">l.empty()</span><br><span class="line">l.size() <span class="comment">//注意, forward_list没有size函数</span></span><br><span class="line">l.insert()</span><br><span class="line">l.erase()</span><br><span class="line">l.push_back()</span><br><span class="line">l.pop_back()</span><br><span class="line">l.push_front()</span><br><span class="line">l.pop_front()</span><br><span class="line">l.sort() <span class="comment">//排序链表中数据</span></span><br><span class="line">l.resize(n, num=<span class="number">0</span>) <span class="comment">//重新定义链表长度, 多删少补(num)</span></span><br><span class="line"></span><br><span class="line">l.merge(<span class="built_in">list</span> x) <span class="comment">//将两个链表有序链表x与l合并，有序结果保存在l中.</span></span><br><span class="line">remove(val) <span class="comment">//从链表中删除val的所有实例。</span></span><br><span class="line">unique() <span class="comment">//将连续相同的元素压缩为单个元素。</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="7-set-multiset-unordered-set"><a href="#7-set-multiset-unordered-set" class="headerlink" title="7. set/multiset/unordered_set"></a><em>7. set/multiset/unordered_set</em></h1><p>set其值与键类型相同，键是唯一的。这意味着集合中不会有多个相同的键。set跟vector差不多，它跟vector的唯一区别就是，set里面的元素是有序的且唯一的，只要你往set里添加元素，它就会自动排序，而且，如果你添加的元素set里面本来就存在，那么这次添加操作就不执行。<br>multiset可以有多个相同的键。<br>unordered无序关联容器基于哈希表，<strong>数据插入和查找的时间复杂度很低</strong>，几乎是常数时间，而代价是消耗比较多的内存，无自动排序功能。set基于红黑树实现，红黑树具有自动排序的功能，因此set内部所有的数据，在任何时候，都是有序的。</p>
<h2 id="头文件-5"><a href="#头文件-5" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt; //注意, 此头文件不被bits/stdc++.h包括</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_multiset&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化-5"><a href="#赋值初始化-5" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s&#123;<span class="number">341</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;; <span class="comment">//自动排序，从小到大,剔除相同项</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s&#123;<span class="string">"hello"</span>, <span class="string">"C++"</span>, <span class="string">"Primer"</span>, <span class="string">"5th"</span>&#125;; <span class="comment">//字典序排序</span></span><br><span class="line">s.insert(<span class="number">1</span>);</span><br><span class="line">s.insert(arry, arry+ <span class="keyword">sizeof</span>(arry)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>) );</span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数-5"><a href="#常用成员函数-5" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">count()     <span class="comment">//返回某个值元素的个数</span></span><br><span class="line">begin()      <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">end()        <span class="comment">//返回指向最后一个元素的下一个位置的迭代器</span></span><br><span class="line">clear()   　 <span class="comment">//删除set容器中的所有的元素</span></span><br><span class="line">empty() 　　 <span class="comment">//判断set容器是否为空</span></span><br><span class="line">size() 　　  <span class="comment">//返回当前set容器中的元素个数</span></span><br><span class="line">max_size() 　<span class="comment">//返回set容器可能包含的元素最大个数</span></span><br><span class="line">rbegin　　　 <span class="comment">//返回的值和end()相同</span></span><br><span class="line">rend()　　　 <span class="comment">//返回的值和rbegin()相同</span></span><br><span class="line"><span class="comment">//操作函数基本与map相同</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="8-map-multimap-unordered-map"><a href="#8-map-multimap-unordered-map" class="headerlink" title="8. map/multimap/unordered_map"></a><em>8. map/multimap/unordered_map</em></h1><p>map和multimap都需要#include<map>，唯一的不同是，map的键值key不可重复，而multimap可以，也正是由于这种区别，map支持[ ]运算符，multimap不支持[ ]运算符。hashmap在stdext或__gun_cxx中</map></p>
<h2 id="头文件-6"><a href="#头文件-6" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hash_map&gt; //更快, 但bits/stdc++.h不包括</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_multimap&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="赋值初始化-6"><a href="#赋值初始化-6" class="headerlink" title="赋值初始化"></a>赋值初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m1; <span class="comment">/// map&lt;key的类型,value的类型&gt;</span></span><br><span class="line"></span><br><span class="line">m[<span class="string">"a"</span>] = <span class="number">1</span>;</span><br><span class="line">m.insert(make_pair(<span class="string">"d"</span>,<span class="number">4</span>));</span><br></pre></td></tr></table></figure>
<h2 id="常用成员函数-6"><a href="#常用成员函数-6" class="headerlink" title="常用成员函数"></a>常用成员函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">begin()         <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">end()           <span class="comment">//返回指向最后一个元素的下一个位置的迭代器</span></span><br><span class="line">empty()         <span class="comment">// 如果map为空则返回true</span></span><br><span class="line">size()          <span class="comment">// 返回map中元素的个数</span></span><br><span class="line">count()         <span class="comment">// 返回指定元素出现的次数</span></span><br><span class="line"></span><br><span class="line">insert()        <span class="comment">// 插入元素</span></span><br><span class="line">find()          <span class="comment">// 查找一个元素</span></span><br><span class="line">erase()         <span class="comment">// 删除一个元素</span></span><br><span class="line">clear(）        <span class="comment">// 删除所有元素</span></span><br><span class="line">equal_range()   <span class="comment">// 返回特殊条目的迭代器对</span></span><br><span class="line">get_allocator() <span class="comment">// 返回map的配置器</span></span><br><span class="line">key_comp()      <span class="comment">// 返回比较元素key的函数</span></span><br><span class="line">lower_bound()   <span class="comment">// 返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">max_size()      <span class="comment">// 返回可以容纳的最大元素个数</span></span><br><span class="line">swap()          <span class="comment">// 交换两个map</span></span><br><span class="line">upper_bound()   <span class="comment">// 返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">value_comp()    <span class="comment">// 返回比较元素value的函数</span></span><br><span class="line">rbegin()        <span class="comment">// 返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">rend()          <span class="comment">// 返回一个指向map头部的逆向迭代器</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="9-常用算法"><a href="#9-常用算法" class="headerlink" title="9.常用算法"></a><em>9.常用算法</em></h1><p>以下算法<strong>几乎</strong>对所有stl容器都适用, 部分特殊容器的算法将以类成员函数给出<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">find(beg, end, v) <span class="comment">//在迭代区间[beg,end)内查找第一个等于v的元素, 返回对应的迭代器, 否则返回end.</span></span><br><span class="line">find_first_of(beg, end, beg2, end2) <span class="comment">//在迭代区间[beg,end)内查找与[beg,end)区间第一个重复的元素, 返回迭代器</span></span><br><span class="line">find_end_of(beg, end, beg2, end2) <span class="comment">//同上, 查找最后一个匹配的元素</span></span><br><span class="line">find_if(beg，end，func) <span class="comment">//一个_if参数的find版本，函数参数func为true时返回迭代器。</span></span><br><span class="line">search(beg, end, beg2, end2) <span class="comment">//迭代区间[beg,end)内查找子序列[beg2,end2)</span></span><br><span class="line">count(beg, end, v) <span class="comment">//统计区间内等于v元素个数</span></span><br><span class="line">count_if(beg，end，func) <span class="comment">//函数count的_if版本。</span></span><br><span class="line">lower_bound(beg, end, v) <span class="comment">//查找区间内第一个大于v的元素</span></span><br><span class="line">upper_bound(beg, end, v) <span class="comment">//查找区间内第一个小于v的元素</span></span><br></pre></td></tr></table></figure>
<h2 id="可变序列算法"><a href="#可变序列算法" class="headerlink" title="可变序列算法"></a>可变序列算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意, 以下此类算法并不会实质上删除元素, 只会将元素移动到末尾</span></span><br><span class="line">copy(beg, end, beg2) <span class="comment">//将区间元素复制到以beg开始的区间</span></span><br><span class="line">transform(beg, end, beg2, func) <span class="comment">//同上, 但每个元素需要经过func处理</span></span><br><span class="line">replace(beg, end, v1, v2) <span class="comment">//区间内等于v1的元素替换为v2</span></span><br><span class="line">replace_if(beg，end，func，v2) <span class="comment">//replace的_if版本</span></span><br><span class="line">replace_copy(beg，end，dest，v1, v2) <span class="comment">//replace的_copy版本, 将结果保存到beg2开始的序列中, 需保证beg2容器的大小</span></span><br><span class="line">replace_copy_if(beg，end，dest，func，v2) <span class="comment">//replace_copy的_if版本</span></span><br><span class="line">fill(beg, end, v) <span class="comment">//区间内元素都写入v</span></span><br><span class="line">fill_n(beg, n, v) <span class="comment">//beg开始的n个元素都写入v</span></span><br><span class="line">generate(beg, end, rand) 区间内元素都写入随机数据, rand函数手动指派</span><br><span class="line">remove(beg, end) <span class="comment">//(移除)将区间内元素移动到序列末尾</span></span><br><span class="line">remove_if(beg，end，func) <span class="comment">//remove的_if版本</span></span><br><span class="line">unique(beg, end) <span class="comment">//剔除**相邻**重复的元素, 移动到序列末尾, 返回无重复范围的下一位置迭代器</span></span><br><span class="line">unique_copy(beg，end，dest) <span class="comment">//unique的_copy版本, 将结果保存到beg2开始的序列中</span></span><br></pre></td></tr></table></figure>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort(beg,end) <span class="comment">//区间内元素按字典序排列</span></span><br><span class="line">stable_sort(beg, end, func) <span class="comment">//同上, 但保存相等元素的顺序关系</span></span><br><span class="line">partial_sort(beg,mid,end) <span class="comment">//局部排序, 将最小顺序放入[beg,mid)内</span></span><br><span class="line">ramdom_shuffle(beg,end) <span class="comment">//区间内元素随机排列</span></span><br><span class="line">reverse(beg, end) <span class="comment">//区间元素反转</span></span><br><span class="line">reverse_copy(beg，end，dest) <span class="comment">//reverse的_copy版本。</span></span><br><span class="line">rotate(beg, mid, end) <span class="comment">//将区间[beg,mid)和[mid,end)旋转, 使mid为新的起点</span></span><br><span class="line">merge(beg, end, beg2, end2, nbeg) <span class="comment">// 将两个有序序列合并为新的有序序列放入nbeg中</span></span><br></pre></td></tr></table></figure>
<h2 id="关系算法"><a href="#关系算法" class="headerlink" title="关系算法"></a>关系算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">equal(beg, end, beg2, end2) <span class="comment">//判断两个区间元素是否相等</span></span><br><span class="line">includes(beg, end, beg2, end2) <span class="comment">//判断序列1是否被序列2包含</span></span><br><span class="line">max_element(beg, end) <span class="comment">//返回序列最大元素的迭代器</span></span><br><span class="line">min_element(beg, end) <span class="comment">//返回序列最小元素的迭代器</span></span><br><span class="line">mismatch(beg, end, beg2) <span class="comment">//查找两个序列中第一个不匹配元素的迭代器pair</span></span><br><span class="line">max(a,b) <span class="comment">//返回a, b中的最大值</span></span><br><span class="line">min(a,b) <span class="comment">//返回a, b中的最小值</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>常用hexo命令</title>
    <url>/2017/09/04/%E5%B8%B8%E7%94%A8hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
<h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传，上传后，可能还是原页面，需要等待一会</span><br><span class="line"></span><br><span class="line">hexo s --debug  </span><br><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>校园采风</title>
    <url>/2018/12/05/%E6%A0%A1%E5%9B%AD%E9%87%87%E9%A3%8E/</url>
    <content><![CDATA[<h1 id="大光圈无敌-👀"><a href="#大光圈无敌-👀" class="headerlink" title=" 大光圈无敌  👀"></a><strong> 大光圈无敌 </strong> 👀</h1><p><strong> 出去走走 你手中的相机总能拍到美景 </strong><br><strong> 景与你 风与你 你与你 </strong></p>
<p><img src="https://s1.ax1x.com/2018/12/05/FlJmfH.jpg"></p>
<p><a href="https://imgchr.com/i/FlJzHf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlJzHf.jpg" alt="FlJzHf.jpg"></a><br><img src="https://s1.ax1x.com/2018/12/05/FlYUUO.jpg" alt="FlYUUO.jpg"><br><a href="https://imgchr.com/i/FlYpE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlYpE8.jpg" alt="FlYpE8.jpg"></a></p>
<p><a href="https://imgchr.com/i/FlJXjI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlJXjI.jpg" alt="FlJXjI.jpg"></a><br><a href="https://imgchr.com/i/FlJxDP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlJxDP.jpg" alt="FlJxDP.jpg"></a><br><a href="https://imgchr.com/i/FlJOgA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlJOgA.jpg" alt="FlJOgA.jpg"></a><br><a href="https://imgchr.com/i/FlYZD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlYZD0.jpg" alt="FlYZD0.jpg"></a><br><a href="https://imgchr.com/i/FlYVuq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlYVuq.jpg" alt="FlYVuq.jpg"></a><br><a href="https://imgchr.com/i/FlYnET" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/05/FlYnET.jpg" alt="FlYnET.jpg"></a></p>
]]></content>
  </entry>
  <entry>
    <title>安静</title>
    <url>/2017/11/26/%E5%AE%89%E9%9D%99/</url>
    <content><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1flvvdngowaj31hc0u0amz.jpg" alt title="  "></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=4878083&auto=0&height=32"></iframe> ]]></content>
  </entry>
  <entry>
    <title>小米笔记本 15.6” 开箱</title>
    <url>/2018/08/31/%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AE%B0%E6%9C%AC%2015.6%E2%80%9D%20%E5%BC%80%E7%AE%B1/</url>
    <content><![CDATA[<p><strong>闲来无事，刚好拿到最近下单的小米笔记本，来一次小小的开箱</strong></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>产品：</strong>小米笔记本 15.6”（还是新品哦）<br>个人感觉就是小米笔记本Pro 15.6″的阉割版，为了迎合开学季的到来</p>
<p><strong>定位：</strong>大学新生务实不打游戏党（当然打个游戏也不成问题，毕竟i5性能在那里，个人意见）<br><strong>版本：</strong>i5 4G 固态128G+机械1T 深空灰（没见到白色有货）<br><strong>价格：</strong>开学季优惠到手3999元 原价4199元起</p>
<p><strong>官网参数：</strong><br><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futbi0zdqqj31hc4crx0v.jpg"></p>
<center>…</center><br><center>…</center><br><center>…</center>

<h1 id="开始开箱"><a href="#开始开箱" class="headerlink" title="开始开箱"></a>开始开箱</h1><h2 id="外包装"><a href="#外包装" class="headerlink" title="外包装:"></a>外包装:</h2><p>简洁的纸盒包装，挺大的。</p>
<table><tr><td><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futbnywftcj31kw16o7wj.jpg" border="0"></td><td><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futbq8ebwxj31kw16okjm.jpg" border="0"></td></tr></table>

<p>盒子表面比较脏，毕竟是下雨天送来的。也是心疼快递员，提着电脑在雨中凌乱等我。</p>
<center>…</center><br><center>…</center>

<h2 id="拆箱："><a href="#拆箱：" class="headerlink" title="拆箱："></a>拆箱：</h2><p><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futbticx0gj31kw16ob2b.jpg"><br>以为里面还有一层白色外包，想太多。</p>
<p>三件套<br><img src="http://wx1.sinaimg.cn/large/0060lm7Tly1futbwkr98aj31kw16o4qr.jpg"></p>
<p>分别是<br>笔记本主体、信封式说明书、黄色棒棒里的充电器</p>
<table> <tr><td><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futbzb7pekj31kw16oe83.jpg" border="0" title="主体"></td><td><img src="http://wx1.sinaimg.cn/large/0060lm7Tly1futbzz40u5j31kw16oe84.jpg" border="0" title="说明书"></td><td><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futbz570zuj31kw16onpf.jpg" border="0" title="充电器"></td></tr></table>

<center>…</center><br><center>…</center><br><center>…</center>

<h2 id="主体："><a href="#主体：" class="headerlink" title="主体："></a>主体：</h2><p>依旧是纯色无logo的设计，我倒是挺喜欢的，简洁还可diy。<br>整体上手还是挺重的，重4斤3两多，懒得换算。<br><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futc22qxusj31kw16oqv7.jpg"><br>背面<br><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futc1uuvz9j31kw16ox6p.jpg"></p>
<p>除了屏幕上盖采用金属，其他部位都是塑料材质，差评！ 一下子就廉价许多了。</p>
<p>屏幕左右边框还是有点大，但整体观感是还行，看惯小米air的我觉得屏幕好大。<br><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futc48u88ij31kw16oe83.jpg"></p>
<p><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futc3sz1wgj31kw16ohdt.jpg"></p>
<p>键盘手感不错，带数字小键盘，15.6寸，你要是不带<br><img src="http://img.smzy.com/imges/2017/0524/20170524091704480.jpg" height="200" width="200"></p>
<p>接口齐全，这里吐槽辣鸡小米air，接口少的可伶。</p>
<p><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futc6vrtjej31hx0x746n.jpg"></p>
<table> <tr><td><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futc8m7l24j31kw16ohdv.jpg" title="右"></td><td><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1futc8gml63j31kw16ohdv.jpg" title="左"></td></tr></table>

<center>…</center><br><center>…</center><br><center>…</center>

<h2 id="开机："><a href="#开机：" class="headerlink" title="开机："></a>开机：</h2><p>第一次开机要插电源激活。<br><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futcavoe8bj31kw16ohdw.jpg" title="电源适配器"></p>
<p><img src="http://img.mp.itc.cn/upload/20161102/dc78aed93fe5471d80ac82684f08621c.png" align="left" height="30" width="30"><br>Cortana竭诚为你服务</p>
<table><td><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futccxqkd8j31kw16o4qr.jpg"></td><td><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futcdavrcsj31kw16ohdv.jpg"></td></table>

<p>第一次开机要登陆微软账号，不想登的可以点’脱机账户’，然后就一如既往了</p>
<p>终于进入桌面,壁纸还行<br><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futcgbv032j31kw16ou10.jpg"></p>
<center>…</center>


<p>简单查看一下配置<br>酷睿i5-8250u 4G内存<br><img src="http://wx1.sinaimg.cn/large/0060lm7Tly1futcfr8odaj31kw16oqv8.jpg"></p>
<center>…</center>


<p>Nvidia GeForce系列显卡 MX110<br><img src="http://wx1.sinaimg.cn/large/0060lm7Tly1futcg19ovmj31kw16o7wj.jpg"></p>
<center>…</center>


<p>两分区，固态系统盘<br><img src="http://wx4.sinaimg.cn/large/0060lm7Tly1futchsk380j31kw16onpf.jpg"></p>
<center>…</center>

<p>不跑分了，毕竟是个简单的开箱<br>最后来一张玩LOL的图（算是测评吧）<br><strong>庆祝UZI夺的亚运英雄联盟冠军！！！</strong><br>画质调极高，抗锯齿，帧率有波动，但基本可以维持在100左右，最低60+，最高120+<br><img src="http://wx2.sinaimg.cn/large/0060lm7Tly1futbh4oy1xj311y0lchdt.jpg"></p>
]]></content>
  </entry>
</search>
